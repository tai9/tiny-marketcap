import CoinPriceMarqueeWidget from "@/components/CoinPriceMarqueeWidget";
import CtyptoTable from "@/components/CryptoTable";
import {
  Box,
  Divider,
  FormControl,
  MenuItem,
  Pagination,
  Select,
  Stack,
  Typography,
} from "@mui/material";
import Button from "@mui/material/Button";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useState } from "react";
const inter = Inter({ subsets: ["latin"] });

const categories = [
  {
    id: "memes",
    label: "Memes",
  },
  {
    id: "solana-ecosystem",
    label: "Solana Ecosystem",
  },
  {
    id: "gaming",
    label: "Gaming",
  },
  {
    id: "ai-big-data",
    label: "AI",
  },
];

type Params = {
  tagSlugs?: string;
  limit: number;
  start: number;
};

export default function Home() {
  const [filters, setFilters] = useState<Params>({
    tagSlugs: undefined,
    limit: 50,
    start: 1,
  });

  const { data, isLoading } = useQuery({
    queryKey: ["coins", filters],
    queryFn: async () => {
      const res = await axios("/api/market", {
        params: filters,
      });
      return res.data;
    },
  });

  const handleViewDetail = () => {};

  const renderRowsPerPage = () => {
    return (
      <Stack direction={"row"} spacing={1} alignItems={"center"}>
        <Typography
          variant="subtitle2"
          color={"#cfd6e4"}
          sx={{
            whiteSpace: "nowrap",
          }}
        >
          Show rows
        </Typography>
        <FormControl fullWidth>
          <Select
            labelId="demo-simple-select-label"
            id="demo-simple-select"
            autoWidth
            onChange={(e) => {
              setFilters((prev) => ({ ...prev, limit: +e.target.value }));
            }}
            size="small"
            value={filters.limit}
          >
            <MenuItem value={20}>20</MenuItem>
            <MenuItem value={50}>50</MenuItem>
            <MenuItem value={100}>100</MenuItem>
          </Select>
        </FormControl>
      </Stack>
    );
  };

  return (
    <>
      <Head>
        <title>Tiny Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <main className={`${inter.className}`}>
        <Stack
          sx={{
            textAlign: "center",
            margin: "64px 0",
          }}
          direction="row"
          alignItems="baseline"
          spacing={1}
          justifyContent="center"
        >
          <img src="/logo.png" width={116} />
          <img src="/logo.svg" />
        </Stack>

        <Box className="screen" pb={2}>
          <CoinPriceMarqueeWidget />
        </Box>

        <Stack direction="column" className="screen" spacing={1}>
          <Stack direction={"row"} spacing={1} justifyContent="space-between">
            <Stack direction="row" spacing={1}>
              <Button
                color={!filters.tagSlugs ? "primary" : "secondary"}
                variant={!filters.tagSlugs ? "outlined" : "text"}
                onClick={() =>
                  setFilters((prev) => ({ ...prev, tagSlugs: undefined }))
                }
              >
                Cryptocurrencies
              </Button>
              <Divider orientation="vertical" variant="middle" flexItem />
              {categories.map((x) => (
                <Button
                  key={x.id}
                  color={x.id === filters.tagSlugs ? "primary" : "secondary"}
                  variant={x.id === filters.tagSlugs ? "outlined" : "text"}
                  onClick={() =>
                    setFilters((prev) => ({ ...prev, tagSlugs: x.id }))
                  }
                >
                  ðŸ”¥ {x.label}
                </Button>
              ))}
            </Stack>

            {renderRowsPerPage()}
          </Stack>

          <CtyptoTable
            rows={data?.cryptoCurrencyList || []}
            total={data?.totalCount}
            handleViewDetail={handleViewDetail}
            rowsPerPage={filters.limit}
            loading={isLoading}
          />
          <Stack
            direction={"row"}
            justifyContent={"space-between"}
            alignItems="center"
          >
            <Typography>
              Showing {filters.start} - {filters.start - 1 + filters.limit} out
              of {data?.totalCount}
            </Typography>
            <Pagination
              size="large"
              count={Math.round(data?.totalCount / filters.limit)}
              variant="outlined"
              shape="rounded"
              onChange={(e, newPage) => {
                setFilters((prev) => ({
                  ...prev,
                  start: (newPage - 1) * prev.limit + 1,
                }));
              }}
            />
            {renderRowsPerPage()}
          </Stack>
        </Stack>
      </main>
    </>
  );
}
